name: SEI DLP Core CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  SEI_CHAIN_ID: '713715'

jobs:
  # Frontend and API Testing
  frontend-tests:
    name: Frontend & API Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'pnpm'
        
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: latest
        
    - name: Install dependencies
      run: pnpm install
      
    - name: Run ESLint
      run: pnpm lint
      
    - name: Run Jest tests
      run: pnpm test -- --coverage --watchAll=false
      
    - name: Upload frontend coverage
      uses: codecov/codecov-action@v4
      with:
        files: ./coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # Python AI Engine Testing
  ai-engine-tests:
    name: AI Engine Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./ai-engine
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: ai-engine/.venv
        key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
        
    - name: Install Python dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
      
    - name: Install package
      run: poetry install --no-interaction
      
    - name: Run Python tests
      run: |
        poetry run python -m pytest tests/ -v --cov=sei_dlp_ai --cov-report=xml --cov-report=html
        
    - name: Upload AI engine coverage
      uses: codecov/codecov-action@v4
      with:
        files: ./ai-engine/coverage.xml
        flags: ai-engine
        name: ai-engine-coverage

  # Smart Contract Testing with Foundry
  smart-contract-tests:
    name: Smart Contract Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./contracts
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Install Foundry
      uses: foundry-rs/foundry-toolchain@v1
      with:
        version: nightly
        
    - name: Run Forge build
      run: |
        forge --version
        forge build --sizes
      id: build
      
    - name: Run Forge tests
      run: |
        forge test -vvv --gas-report
      id: test
      
    - name: Run Forge coverage
      run: |
        forge coverage --report lcov
      id: coverage
      
    - name: Upload smart contract coverage
      uses: codecov/codecov-action@v4
      with:
        files: ./contracts/lcov.info
        flags: smart-contracts
        name: smart-contracts-coverage

  # SEI Network Integration Tests
  sei-integration-tests:
    name: SEI Network Integration
    runs-on: ubuntu-latest
    needs: [frontend-tests, ai-engine-tests, smart-contract-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'pnpm'
        
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: latest
        
    - name: Install dependencies
      run: pnpm install
      
    - name: Setup Foundry
      uses: foundry-rs/foundry-toolchain@v1
      with:
        version: nightly
        
    - name: Run SEI-specific tests
      working-directory: ./contracts
      run: |
        # Test SEI chain validation
        forge test --match-test "test_SEIChain" -vvv
        
        # Test SEI optimizations
        forge test --match-test "test_SEIOptimized" -vvv
        
        # Test parallel execution
        forge test --match-test "test_ParallelExecution" -vvv

  # Security Analysis
  security-analysis:
    name: Security Analysis
    runs-on: ubuntu-latest
    needs: smart-contract-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Foundry
      uses: foundry-rs/foundry-toolchain@v1
      with:
        version: nightly
        
    - name: Run Slither analysis
      uses: crytic/slither-action@v0.3.0
      with:
        target: 'contracts/src'
        slither-config: 'contracts/slither.config.json'
        fail-on: none
        
    - name: Run Mythril analysis
      working-directory: ./contracts
      run: |
        pip install mythril
        myth analyze src/SEIVault.sol --solc-json mythril.json || true
        myth analyze src/StrategyVault.sol --solc-json mythril.json || true

  # DevNet Mock Deployment (only on main branch)
  devnet-mock-deployment:
    name: DevNet Mock Deployment & Testing
    runs-on: ubuntu-latest
    needs: [sei-integration-tests, security-analysis]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: devnet
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Foundry
      uses: foundry-rs/foundry-toolchain@v1
      with:
        version: nightly
        
    - name: Run DevNet Mock Deployment
      working-directory: ./contracts
      env:
        SEI_DEVNET_RPC_URL: ${{ secrets.SEI_DEVNET_RPC_URL }}
        PRIVATE_KEY: ${{ secrets.DEPLOYER_PRIVATE_KEY }}
      run: |
        # Mock deployment validation on DevNet
        forge script script/Deploy.s.sol:DeployScript \
          --rpc-url $SEI_DEVNET_RPC_URL \
          --private-key $PRIVATE_KEY \
          --broadcast \
          --chain-id 713715 \
          --dry-run
          
        # Run deployment tests
        forge test --match-test "test_Deploy" -vvv
          
    - name: Validate DevNet Configuration
      run: |
        echo "✅ DevNet mock deployment validated successfully"
        echo "Environment: DevNet"
        echo "Chain ID: 713715"

  # Frontend Deployment
  deploy-frontend:
    name: Deploy Frontend to Cloudflare
    runs-on: ubuntu-latest
    needs: [frontend-tests, devnet-mock-deployment]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'pnpm'
        
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: latest
        
    - name: Install dependencies
      run: pnpm install
      
    - name: Build application
      env:
        NEXT_PUBLIC_SEI_CHAIN_ID: ${{ env.SEI_CHAIN_ID }}
        NEXT_PUBLIC_VAULT_FACTORY_ADDRESS: ${{ secrets.VAULT_FACTORY_ADDRESS }}
        NEXT_PUBLIC_ENVIRONMENT: 'devnet'
      run: pnpm build
      
    - name: Deploy to Cloudflare Workers
      working-directory: /tmp
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      run: |
        # Install wrangler CLI
        npm install -g wrangler
        
        # Create a basic wrangler.toml configuration
        cat > wrangler.toml << EOF
        name = "sei-dlp-frontend"
        main = "index.js"
        compatibility_date = "2024-01-01"
        
        [env.production]
        account_id = "${{ secrets.CLOUDFLARE_ACCOUNT_ID }}"
        
        [[env.production.kv_namespaces]]
        binding = "KV"
        id = "${{ secrets.CLOUDFLARE_KV_ID }}"
        EOF
        
        # Create a simple Worker script that serves the Next.js app
        cat > index.js << EOF
        export default {
          async fetch(request, env, ctx) {
            const url = new URL(request.url);
            
            // Simple static file serving logic
            // In a real deployment, you'd want to use @cloudflare/next-on-pages
            
            return new Response('Deployment placeholder - configure @cloudflare/next-on-pages for full functionality', {
              status: 200,
              headers: { 'Content-Type': 'text/plain' }
            });
          }
        };
        EOF
        
        # Deploy to Cloudflare Workers
        wrangler deploy --env production
        
        # Note: For full Next.js support, consider using @cloudflare/next-on-pages
        echo "Deployed to Cloudflare Workers. Configure @cloudflare/next-on-pages for full Next.js support."

  # AI Engine Deployment
  deploy-ai-engine:
    name: Deploy AI Engine
    runs-on: ubuntu-latest
    needs: [ai-engine-tests, devnet-mock-deployment]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      
    - name: Build AI Engine
      working-directory: ./ai-engine
      run: |
        poetry build
        
    - name: Deploy to Cloud Run
      uses: google-github-actions/deploy-cloudrun@v1
      with:
        service: sei-dlp-ai-engine
        region: us-central1
        image: gcr.io/${{ secrets.GCP_PROJECT_ID }}/sei-dlp-ai:${{ github.sha }}
        credentials: ${{ secrets.GCP_SA_KEY }}

  # Notification and Monitoring
  notify-completion:
    name: Notify Deployment Completion
    runs-on: ubuntu-latest
    needs: [devnet-mock-deployment, deploy-frontend, deploy-ai-engine]
    if: always()
    
    steps:
    - name: Notify Discord
      uses: Ilshidur/action-discord@master
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      with:
        args: |
          🚀 **SEI DLP Core Deployment Complete**
          
          **Status**: ${{ needs.devnet-mock-deployment.result == 'success' && needs.deploy-frontend.result == 'success' && needs.deploy-ai-engine.result == 'success' && '✅ Success' || '❌ Failed' }}
          **Commit**: `${{ github.sha }}`
          **Branch**: `${{ github.ref_name }}`
          
          **Components**:
          • DevNet Validation: ${{ needs.devnet-mock-deployment.result == 'success' && '✅' || '❌' }}
          • Frontend (Cloudflare): ${{ needs.deploy-frontend.result == 'success' && '✅' || '❌' }}
          • AI Engine: ${{ needs.deploy-ai-engine.result == 'success' && '✅' || '❌' }}
          
          **SEI Network**: Chain ID 713715
          **Environment**: DevNet
